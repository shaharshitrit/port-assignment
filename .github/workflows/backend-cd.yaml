name: Backend App CD

on:
  push:
    branches:
      - main  # Only trigger on pushes to the main branch
  workflow_dispatch:
    inputs:
      increment:
        description: "Version increment level"
        required: false
        default: "patch"  # Default increment is patch
        type: choice
        options:
          - patch
          - minor
          - major

permissions:
  id-token: write
  contents: write

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    env:
      ECR_REGISTRY: 897722709068.dkr.ecr.eu-north-1.amazonaws.com
      ECR_REPOSITORY: backend-app
      AWS_REGION: eu-north-1

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Determine version
        id: version
        run: |
          LATEST_TAG=$(git tag -l | cut -d 'v' -f 2 | sort --version-sort | tail -1)
          
          MAJ="$(echo $LATEST_TAG | cut -d '.' -f 1)"
          MIN="$(echo $LATEST_TAG | cut -d '.' -f 2)"
          PAT="$(echo $LATEST_TAG | cut -d '.' -f 3)"

          # Increment version part
          if [[ ${{ github.event.inputs.increment }} == "major" ]]; then
              MAJ=$((MAJ+1))
              VERSION="$MAJ.0.0"
          elif [[ ${{ github.event.inputs.increment }} == "minor" ]]; then
              MIN=$((MIN+1))
              VERSION="$MAJ.$MIN.0"
          else
              PAT=$((PAT+1))
              VERSION="$MAJ.$MIN.$PAT"
          fi
          
          NEW_TAG="v$VERSION"
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV
          git tag $NEW_TAG
          git push origin $NEW_TAG

      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY }}

      - name: Build Docker image
        run: |
          docker build -t ${{ env.ECR_REPOSITORY }}:${{ env.NEW_TAG }} -t ${{ env.ECR_REPOSITORY }}:latest -f Dockerfile .
          docker tag ${{ env.ECR_REPOSITORY }}:${{ env.NEW_TAG }} ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.NEW_TAG }}
          docker tag ${{ env.ECR_REPOSITORY }}:latest ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest

      - name: Push Docker image to ECR
        run: |
          docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.NEW_TAG }}
          docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest

      - name: Update Kubernetes Deployment with New Tag
        run: |
          # Update the Kubernetes deployment to use the new image tag
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name assignment-shahar-cluster
          kubectl -n backend-app set image deployment/apirest-web fastapi-helloworld=${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.NEW_TAG }}

